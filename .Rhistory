return_class = "data.table",
return_error = TRUE
)
dir.create("./siminer")
output_fit(fit_legacy, result_dir = paste(out_dir,  "/sigminer") , mut_type = "SBS")
fit_sbs <-  sig_fit(
catalogue_matrix = maf,
sig_index = "ALL",
sig_db = "SBS",
mode = "SBS",
method = "SA",
return_class = "data.table",
return_error = TRUE
)
output_fit(fit_sbs, result_dir = paste(out_dir,  "/sigminer") , mut_type = "SBS")
# system(paste('docker run -v ', input_vcfs_dir ,  ':/docker_path shixiangwang/sigflow fit -i /docker_path/ -o /docker_path/', out_dir))
}
output_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\PLOS_review_paper\\meta_package_data"
# output_dir = args[1]
# sample_mut_mat = runMuationalPatterns(out_dir = output_dir )
# runSigfit(mut_mat = sample_mut_mat, out_dir = output_dir)
# runDeconstructSigs(out_dir = output_dir)
runSigflow(out_dir = output_dir)
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf//no_comments/"
ref_genome = "hg19"
out_dir = output_dir
snp_files_list <- dir(input_vcfs_dir, pattern = ".*.vcf")[1:10]
setwd(input_vcfs_dir)
maf <- read_vcf(
snp_files_list,
genome_build = "hg19",
keep_only_pass = TRUE,
verbose = TRUE
)
sig_tally(maf)
sig_tally(maf)$nmf_matrix
data_matrix = sig_tally(maf)$nmf_matrix
fit_legacy <-  sig_fit(
catalogue_matrix = data_matrix,
sig_index = "ALL",
sig_db = "legacy",
mode = "SBS",
method = "SA",
return_class = "data.table",
return_error = TRUE
)
fit_legacy <-  sig_fit(
catalogue_matrix = t(data_matrix),
sig_index = "ALL",
sig_db = "legacy",
mode = "SBS",
method = "SA",
return_class = "data.table",
return_error = TRUE
)
dir.create("./siminer")
output_fit(fit_legacy, result_dir = paste(out_dir,  "/sigminer") , mut_type = "SBS")
output_fit(fit_legacy, result_dir = paste(out_dir,  "/sigminer") , mut_type = "SBS")
setwd(out_dir)
dir.create("./siminer")
output_fit(fit_legacy, result_dir = paste(out_dir,  "/sigminer") , mut_type = "SBS")
output_fit(fit_legacy, result_dir = "sigminer" , mut_type = "SBS")
?output_fit
fit_legacy
output_fit(fit_legacy, result_dir = "sigminer" , mut_type = "legacy")
output_fit(fit_legacy, result_dir = "sigflow" , mut_type = "legacy")
fit_sbs <-  sig_fit(
catalogue_matrix = t(data_matrix),
sig_index = "ALL",
sig_db = "SBS",
mode = "SBS",
method = "SA",
return_class = "data.table",
return_error = TRUE
)
output_fit(fit_sbs, result_dir = paste(out_dir,  "/sigflowr") , mut_type = "SBS")
output_fit(fit_sbs, result_dir = "sigflow" , mut_type = "SBS")
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("VariantAnnotation")
# biocLite("VariantAnnotation")
setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\")
# unzip("deconstructSigs-master.zip")
# install.packages("deconstructSigs-master/", repos = NULL, type="source")
# BiocManager::install("MutationalPatterns")
# library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
library(deconstructSigs)
library(sigfit)
library(sigminer)
data("cosmic_signatures_v2")
data("cosmic_signatures_v3")
load("deconstructSigs-master/data/signatures.exome.cosmic.v3.may2019.rda")
load("deconstructSigs-master/data/signatures.cosmic.rda")
FrobeniusNorm <- function(M, P, E) {
sqrt(sum((M - P %*% E)^2))
}
FrobeniusNorm_deconstructsigs <- function(i, input_matrices_list, exposures_list , referenence_sigs) {
M <- as.numeric(unlist(input_matrices_list[i]))
P <- as.numeric(unlist(exposures_list[i]))
E <- as.matrix(referenence_sigs)
sqrt(sum((M - (P %*% E) ) ^2))
}
FrobeniusNorm_mutational_patterns <- function(M) {
sqrt(sum((M)^2))
}
runMuationalPatterns = function(
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf/",
ref_genome = "BSgenome.Hsapiens.UCSC.hg19",
out_dir){
ref_genome <- ref_genome
setwd(input_vcfs_dir)
# Matches all VCF files in given directory
snp_files_list <- dir(input_vcfs_dir, pattern = ".*.vcf")[1:10]
grl <- read_vcfs_as_granges(snp_files_list, snp_files_list , ref_genome)
mut_mat <- mut_matrix(vcf_list = grl, ref_genome = ref_genome)
# COSMIC 2019 SBS signatures
signatures = get_known_signatures(source = "COSMIC")
# Strict signature fitting iteratively reduces the number of signatures used for refitting by removing the signature with least contribution
strict_refit <- fit_to_signatures_strict(mut_mat, signatures, max_delta = 0.004)
fit_res_strict <- strict_refit$fit_res
mut_patterns_strict_errors <-  as.matrix.data.frame(t(mut_mat - fit_res_strict$reconstructed))
mut_patterns_strict_errors <- apply(mut_patterns_strict_errors  , 1, FrobeniusNorm_mutational_patterns )
setwd(out_dir)
dir.create("./mutational_patterns_results")
write.csv(fit_res_strict$contribution, "./mutational_patterns_results/strict_sample_exposures.csv")
write.csv(mut_patterns_strict_errors, "./mutational_patterns_results/strict_sample_errors.csv")
# This is traditional decomposition
fit_res <- fit_to_signatures(mut_mat, signatures)
mut_patterns_errors <-  as.matrix.data.frame(t(mut_mat - fit_res$reconstructed))
mut_patterns_errors <- apply(mut_patterns_errors  , 1, FrobeniusNorm_mutational_patterns )
write.csv(fit_res$contribution, "./mutational_patterns_results/sample_exposures.csv")
write.csv(mut_patterns_errors, "./mutational_patterns_results/sample_errors.csv")
# COSMIC 30 signatures
signatures_legacy = t(cosmic_signatures_v2)
# Strict signature fitting iteratively reduces the number of signatures used for refitting by removing the signature with least contribution
strict_refit_legacy <- fit_to_signatures_strict(mut_mat, signatures_legacy, max_delta = 0.004)
fit_res_strict_legacy <- strict_refit_legacy$fit_res
mut_patterns_strict_legacy_errors <-  as.matrix.data.frame(t(mut_mat - fit_res_strict_legacy$reconstructed))
mut_patterns_strict_legacy_errors <- apply(mut_patterns_strict_legacy_errors  , 1, FrobeniusNorm_mutational_patterns )
write.csv(fit_res_strict_legacy$contribution, "./mutational_patterns_results/legacy_strict_sample_exposures.csv")
write.csv(mut_patterns_strict_legacy_errors, "./mutational_patterns_results/legacy_strict_sample_errors.csv")
# This is traditional decomposition
fit_res_legacy <- fit_to_signatures(mut_mat, signatures_legacy)
mut_patterns_legacy_errors <-  as.matrix.data.frame(t(mut_mat - fit_res_strict$reconstructed))
mut_patterns_legacy_errors <- apply(mut_patterns_legacy_errors  , 1, FrobeniusNorm_mutational_patterns )
write.csv(fit_res_legacy$contribution, "./mutational_patterns_results/legacy_sample_exposures.csv")
write.csv(mut_patterns_legacy_errors, "./mutational_patterns_results/legacy_sample_errors.csv")
return(mut_mat)
}
runDeconstructSigs = function(
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf/",
ref_genome = "BSgenome.Hsapiens.UCSC.hg19",
out_dir){
setwd(input_vcfs_dir)
snp_files_list <- dir(input_vcfs_dir, pattern = ".*.vcf")[1:10]
v2_input_matrices_list <-  lapply(snp_files_list, vcf.to.sigs.input )
v2_signatures_list <- lapply(v2_input_matrices_list, whichSignatures,contexts.needed = TRUE,signatures.ref = signatures.cosmic )
v2_exposures_list <- lapply(v2_signatures_list, function(x) x$weights )
v2_diff_list <- lapply(v2_signatures_list, function(x) x$diff )
v2_error_list <- lapply( seq(length(v2_diff_list))  , function(i) FrobeniusNorm_deconstructsigs(i, v2_input_matrices_list, v2_exposures_list,signatures.cosmic)  )
#### SBS
v3_input_matrices_list <- lapply(snp_files_list, vcf.to.sigs.input )
v3_signatures_list <- lapply(v3_input_matrices_list, whichSignatures,contexts.needed = TRUE,signatures.ref = signatures.exome.cosmic.v3.may2019 )
v3_exposures_list <- lapply(v3_signatures_list, function(x) x$weights )
v3_diff_list <- lapply(v3_signatures_list, function(x) x$diff )
v3_error_list <- lapply( seq(length(v3_diff_list))  , function(i) FrobeniusNorm_deconstructsigs(i, v3_input_matrices_list, v3_exposures_list, signatures.exome.cosmic.v3.may2019)  )
setwd(out_dir)
dir.create("./deconstructsigs_results")
write.csv(unlist(v2_error_list), row.names = snp_files_list,   "./deconstructsigs_results/legacy_sample_errors.csv")
write.csv(do.call(rbind,lapply(v2_exposures_list,data.frame)), row.names = snp_files_list, "./deconstructsigs_results/legacy_sample_exposures.csv")
write.csv(unlist(v3_error_list), row.names = snp_files_list, "./deconstructsigs_results/sbs_sample_errors.csv")
write.csv(do.call(rbind,lapply(v3_exposures_list,data.frame)), row.names = snp_files_list, "./deconstructsigs_results/sbs_sample_exposures.csv")
}
runSigfit = function(
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf//",
ref_genome = "BSgenome.Hsapiens.UCSC.hg19",
out_dir,
mut_mat){
setwd(input_vcfs_dir)
samples_fit <- fit_signatures(counts = mut_mat,signatures = cosmic_signatures_v2,iter = 3000, warmup = 1000,chains = 1, seed = 1756)
# plot_all(mcmc_samples = samples_fit, out_path = "./vcf_no_common_sigfit/", prefix = "no_common_legacy")
sample_exposures <- retrieve_pars(samples_fit, "exposures")
catalogue_matrix <- as.data.frame(mut_mat )
sig_matrix <- t(as.matrix(samples_fit[["data"]][["signatures"]]))
expo_mat <- t(as.matrix(sample_exposures$mean))
errors_per_sample <- sapply(seq(ncol(expo_mat)), function(i) FrobeniusNorm(catalogue_matrix[i, ], sig_matrix, expo_mat[, i] ))
rmse <- sqrt(mean(errors_per_sample^2))
errors_per_sample <- as.data.frame(errors_per_sample)
row.names(errors_per_sample) <- row.names(sample_exposures$mean)
#### SBS
samples_fit_sbs <- fit_signatures(counts = mut_mat,signatures = cosmic_signatures_v3,iter = 3000, warmup = 1000,chains = 1, seed = 1756)
sample_exposures_sbs <- retrieve_pars(samples_fit_sbs, "exposures")
catalogue_matrix_sbs <- t(as.data.frame(mut_mat ))
sig_matrix_sbs <- t(as.matrix(samples_fit_sbs[["data"]][["signatures"]]))
expo_mat_sbs <- t(as.matrix(sample_exposures_sbs$mean))
errors_per_sample_sbs <- sapply(seq(ncol(expo_mat_sbs)), function(i) FrobeniusNorm(catalogue_matrix_sbs[i, ], sig_matrix_sbs, expo_mat_sbs[, i] ))
rmse_sbs <- sqrt(mean(errors_per_sample_sbs^2))
errors_per_sample_sbs <- as.data.frame(errors_per_sample_sbs)
row.names(errors_per_sample_sbs) <- row.names(sample_exposures_sbs$mean)
setwd(out_dir)
dir.create("./sigfit_results")
write.csv(errors_per_sample, "./sigfit_results/sample_errors.csv")
write.csv(sample_exposures, "./sigfit_results/sample_exposures.csv")
write.csv(errors_per_sample_sbs, "./sigfit_results/sample_errors_sbs.csv")
write.csv(sample_exposures_sbs, "./sigfit_results/sample_exposures_sbs.csv")
}
runSigflow = function(
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf//no_comments/",
ref_genome = "hg19",
out_dir){
snp_files_list <- dir(input_vcfs_dir, pattern = ".*.vcf")[1:10]
setwd(input_vcfs_dir)
maf <- read_vcf(
snp_files_list,
genome_build = "hg19",
keep_only_pass = TRUE,
verbose = TRUE
)
data_matrix = sig_tally(maf)$nmf_matrix
fit_legacy <-  sig_fit(
catalogue_matrix = t(data_matrix),
sig_index = "ALL",
sig_db = "legacy",
mode = "SBS",
method = "SA",
return_class = "data.table",
return_error = TRUE
)
setwd(out_dir)
output_fit(fit_legacy, result_dir = "sigflow" , mut_type = "legacy")
fit_sbs <-  sig_fit(
catalogue_matrix = t(data_matrix),
sig_index = "ALL",
sig_db = "SBS",
mode = "SBS",
method = "SA",
return_class = "data.table",
return_error = TRUE
)
output_fit(fit_sbs, result_dir =  "sigflow" , mut_type = "SBS")
# system(paste('docker run -v ', input_vcfs_dir ,  ':/docker_path shixiangwang/sigflow fit -i /docker_path/ -o /docker_path/', out_dir))
}
output_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\PLOS_review_paper\\meta_package_data"
# output_dir = args[1]
# sample_mut_mat = runMuationalPatterns(out_dir = output_dir )
# runSigfit(mut_mat = sample_mut_mat, out_dir = output_dir)
# runDeconstructSigs(out_dir = output_dir)
runSigflow(out_dir = output_dir)
installed.packages("sigfit")
installed.packages("deconstructSigs")
BiocManager::install('deconstructSigs', dependencies = TRUE)
data("cosmic_signatures_v2")
data("cosmic_signatures_v3")
data("cosmic_signatures_v2")
load("data/signatures.exome.cosmic.v3.may2019.rda")
setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\PLOS_review_paper\\metaSignatures/")
load("data/signatures.exome.cosmic.v3.may2019.rda")
load("data/signatures.exome.cosmic.v3.may2019.rda")
setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\PLOS_review_paper\\metaSignatures/")
load("data/signatures.exome.cosmic.v3.may2019.rda")
load("data/signatures.cosmic.rda")
setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\PLOS_review_paper\\metaSignatures/")
load("data/signatures.exome.cosmic.v3.may2019.rda")
load("data/signatures.cosmic.rda")
FrobeniusNorm <- function(M, P, E) {
sqrt(sum((M - P %*% E)^2))
}
FrobeniusNorm <- function(M, P, E) {
sqrt(sum((M - P %*% E)^2))
}
# setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\PLOS_review_paper\\metaSignatures/")
# load("data/signatures.exome.cosmic.v3.may2019.rda")
load("data/signatures.cosmic.rda")
cosmic_signatures_v2
cosmic_signatures_v2
data("cosmic_signatures_v3")
data("cosmic_signatures_v2")
data("cosmic_signatures_v3")
View(signatures.cosmic)
View(cosmic_signatures_v2)
View(cosmic_signatures_v3)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("VariantAnnotation")
# biocLite("VariantAnnotation")
setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\")
# unzip("deconstructSigs-master.zip")
# install.packages("deconstructSigs-master/", repos = NULL, type="source")
# BiocManager::install("MutationalPatterns")
# library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
library(deconstructSigs)
library(sigfit)
library(sigminer)
data("cosmic_signatures_v2")
data("cosmic_signatures_v3")
FrobeniusNorm <- function(M, P, E) {
sqrt(sum((M - P %*% E)^2))
}
FrobeniusNorm_deconstructsigs <- function(i, input_matrices_list, exposures_list , referenence_sigs) {
M <- as.numeric(unlist(input_matrices_list[i]))
P <- as.numeric(unlist(exposures_list[i]))
E <- as.matrix(referenence_sigs)
sqrt(sum((M - (P %*% E) ) ^2))
}
FrobeniusNorm_mutational_patterns <- function(M) {
sqrt(sum((M)^2))
}
#########################################
# Mutational Patterns
#########################################
#' Run mutationalPatterns refitting pipeline for COSMIC 30 and SBS signatures
#' @param input_vcfs_dir The directory where sample VCF files are
#' @param ref_genome Refernce genome version. Needs to be in the BSgenome library.
#' @param out_dir The output directory
#' @return Mutational catalog i.e matrix of counts of 96 mutational contexts
#' @example sample_mut_mat = runMuationalPatterns(input_vcfs_dir = "input_vcfs", ref_genome= "BSgenome.Hsapiens.UCSC.hg19", out_dir = "mutationalSigsPlots")
runMuationalPatterns = function(
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf/",
ref_genome = "BSgenome.Hsapiens.UCSC.hg19",
out_dir){
ref_genome <- ref_genome
setwd(input_vcfs_dir)
# Matches all VCF files in given directory
snp_files_list <- dir(input_vcfs_dir, pattern = ".*.vcf")[1:10]
grl <- read_vcfs_as_granges(snp_files_list, snp_files_list , ref_genome)
mut_mat <- mut_matrix(vcf_list = grl, ref_genome = ref_genome)
# COSMIC 2019 SBS signatures
signatures = get_known_signatures(source = "COSMIC")
# Strict signature fitting iteratively reduces the number of signatures used for refitting by removing the signature with least contribution
strict_refit <- fit_to_signatures_strict(mut_mat, signatures, max_delta = 0.004)
fit_res_strict <- strict_refit$fit_res
mut_patterns_strict_errors <-  as.matrix.data.frame(t(mut_mat - fit_res_strict$reconstructed))
mut_patterns_strict_errors <- apply(mut_patterns_strict_errors  , 1, FrobeniusNorm_mutational_patterns )
setwd(out_dir)
dir.create("./mutational_patterns_results")
write.csv(fit_res_strict$contribution, "./mutational_patterns_results/strict_sample_exposures.csv")
write.csv(mut_patterns_strict_errors, "./mutational_patterns_results/strict_sample_errors.csv")
# This is traditional decomposition
fit_res <- fit_to_signatures(mut_mat, signatures)
mut_patterns_errors <-  as.matrix.data.frame(t(mut_mat - fit_res$reconstructed))
mut_patterns_errors <- apply(mut_patterns_errors  , 1, FrobeniusNorm_mutational_patterns )
write.csv(fit_res$contribution, "./mutational_patterns_results/sample_exposures.csv")
write.csv(mut_patterns_errors, "./mutational_patterns_results/sample_errors.csv")
# COSMIC 30 signatures
signatures_legacy = t(cosmic_signatures_v2)
# Strict signature fitting iteratively reduces the number of signatures used for refitting by removing the signature with least contribution
strict_refit_legacy <- fit_to_signatures_strict(mut_mat, signatures_legacy, max_delta = 0.004)
fit_res_strict_legacy <- strict_refit_legacy$fit_res
mut_patterns_strict_legacy_errors <-  as.matrix.data.frame(t(mut_mat - fit_res_strict_legacy$reconstructed))
mut_patterns_strict_legacy_errors <- apply(mut_patterns_strict_legacy_errors  , 1, FrobeniusNorm_mutational_patterns )
write.csv(fit_res_strict_legacy$contribution, "./mutational_patterns_results/legacy_strict_sample_exposures.csv")
write.csv(mut_patterns_strict_legacy_errors, "./mutational_patterns_results/legacy_strict_sample_errors.csv")
# This is traditional decomposition
fit_res_legacy <- fit_to_signatures(mut_mat, signatures_legacy)
mut_patterns_legacy_errors <-  as.matrix.data.frame(t(mut_mat - fit_res_strict$reconstructed))
mut_patterns_legacy_errors <- apply(mut_patterns_legacy_errors  , 1, FrobeniusNorm_mutational_patterns )
write.csv(fit_res_legacy$contribution, "./mutational_patterns_results/legacy_sample_exposures.csv")
write.csv(mut_patterns_legacy_errors, "./mutational_patterns_results/legacy_sample_errors.csv")
return(mut_mat)
}
#########################################
# DeconstructSigs
#########################################
#' Run DeconstructSigs refitting pipeline for COSMIC 30 and SBS signatures
#' @param input_vcfs_dir The directory where sample VCF files are
#' @param ref_genome Refernce genome version. Needs to be in the BSgenome library.
#' @param out_dir The output directory
#' @example runDeconstructSigs(input_vcfs_dir = "input_vcfs", ref_genome= "BSgenome.Hsapiens.UCSC.hg19", out_dir = "DeconstructSigsPlots")
runDeconstructSigs = function(
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf/",
ref_genome = "BSgenome.Hsapiens.UCSC.hg19",
out_dir){
setwd(input_vcfs_dir)
snp_files_list <- dir(input_vcfs_dir, pattern = ".*.vcf")[1:10]
v2_input_matrices_list <-  lapply(snp_files_list, vcf.to.sigs.input )
v2_signatures_list <- lapply(v2_input_matrices_list, whichSignatures,contexts.needed = TRUE,signatures.ref = cosmic_signatures_v2 )
v2_exposures_list <- lapply(v2_signatures_list, function(x) x$weights )
v2_diff_list <- lapply(v2_signatures_list, function(x) x$diff )
v2_error_list <- lapply( seq(length(v2_diff_list))  , function(i) FrobeniusNorm_deconstructsigs(i, v2_input_matrices_list, v2_exposures_list,signatures.cosmic)  )
#### SBS
v3_input_matrices_list <- lapply(snp_files_list, vcf.to.sigs.input )
v3_signatures_list <- lapply(v3_input_matrices_list, whichSignatures,contexts.needed = TRUE,signatures.ref = cosmic_signatures_v3 )
v3_exposures_list <- lapply(v3_signatures_list, function(x) x$weights )
v3_diff_list <- lapply(v3_signatures_list, function(x) x$diff )
v3_error_list <- lapply( seq(length(v3_diff_list))  , function(i) FrobeniusNorm_deconstructsigs(i, v3_input_matrices_list, v3_exposures_list, signatures.exome.cosmic.v3.may2019)  )
setwd(out_dir)
dir.create("./deconstructsigs_results")
write.csv(unlist(v2_error_list), row.names = snp_files_list,   "./deconstructsigs_results/legacy_sample_errors.csv")
write.csv(do.call(rbind,lapply(v2_exposures_list,data.frame)), row.names = snp_files_list, "./deconstructsigs_results/legacy_sample_exposures.csv")
write.csv(unlist(v3_error_list), row.names = snp_files_list, "./deconstructsigs_results/sbs_sample_errors.csv")
write.csv(do.call(rbind,lapply(v3_exposures_list,data.frame)), row.names = snp_files_list, "./deconstructsigs_results/sbs_sample_exposures.csv")
}
#########################################
# Sigfit
#########################################
#' Run Sigfit refitting pipeline for COSMIC 30 and SBS signatures
#' @param input_vcfs_dir The directory where sample VCF files are
#' @param ref_genome Refernce genome version. Needs to be in the BSgenome library.
#' @param out_dir The output directory
#' @param  mut_mat Mutational catalog i.e matrix of counts of 96 mutational contexts
#' @example runSigfit(input_vcfs_dir = "input_vcfs", ref_genome= "BSgenome.Hsapiens.UCSC.hg19", out_dir = "SigfitPlots")
runSigfit = function(
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf//",
ref_genome = "BSgenome.Hsapiens.UCSC.hg19",
out_dir,
mut_mat){
setwd(input_vcfs_dir)
samples_fit <- fit_signatures(counts = mut_mat,signatures = cosmic_signatures_v2,iter = 3000, warmup = 1000,chains = 1, seed = 1756)
# plot_all(mcmc_samples = samples_fit, out_path = "./vcf_no_common_sigfit/", prefix = "no_common_legacy")
sample_exposures <- retrieve_pars(samples_fit, "exposures")
catalogue_matrix <- as.data.frame(mut_mat )
sig_matrix <- t(as.matrix(samples_fit[["data"]][["signatures"]]))
expo_mat <- t(as.matrix(sample_exposures$mean))
errors_per_sample <- sapply(seq(ncol(expo_mat)), function(i) FrobeniusNorm(catalogue_matrix[i, ], sig_matrix, expo_mat[, i] ))
rmse <- sqrt(mean(errors_per_sample^2))
errors_per_sample <- as.data.frame(errors_per_sample)
row.names(errors_per_sample) <- row.names(sample_exposures$mean)
#### SBS
samples_fit_sbs <- fit_signatures(counts = mut_mat,signatures = cosmic_signatures_v3,iter = 3000, warmup = 1000,chains = 1, seed = 1756)
sample_exposures_sbs <- retrieve_pars(samples_fit_sbs, "exposures")
catalogue_matrix_sbs <- t(as.data.frame(mut_mat ))
sig_matrix_sbs <- t(as.matrix(samples_fit_sbs[["data"]][["signatures"]]))
expo_mat_sbs <- t(as.matrix(sample_exposures_sbs$mean))
errors_per_sample_sbs <- sapply(seq(ncol(expo_mat_sbs)), function(i) FrobeniusNorm(catalogue_matrix_sbs[i, ], sig_matrix_sbs, expo_mat_sbs[, i] ))
rmse_sbs <- sqrt(mean(errors_per_sample_sbs^2))
errors_per_sample_sbs <- as.data.frame(errors_per_sample_sbs)
row.names(errors_per_sample_sbs) <- row.names(sample_exposures_sbs$mean)
setwd(out_dir)
dir.create("./sigfit_results")
write.csv(errors_per_sample, "./sigfit_results/sample_errors.csv")
write.csv(sample_exposures, "./sigfit_results/sample_exposures.csv")
write.csv(errors_per_sample_sbs, "./sigfit_results/sample_errors_sbs.csv")
write.csv(sample_exposures_sbs, "./sigfit_results/sample_exposures_sbs.csv")
}
#########################################
# Sigflow
#########################################
#' Run Sigminer/Sigflow refitting pipeline for COSMIC 30 and SBS signatures
#' @param input_vcfs_dir The directory where sample VCF files are
#' @param ref_genome Refernce genome version. Hg19/Hg38
#' @param out_dir The output directory
#' @example runSigflow(input_vcfs_dir = "input_vcfs", ref_genome= "BSgenome.Hsapiens.UCSC.hg19", out_dir = "SigflowPlots")
runSigflow = function(
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf//no_comments/",
ref_genome = "hg19",
out_dir){
snp_files_list <- dir(input_vcfs_dir, pattern = ".*.vcf")[1:10]
setwd(input_vcfs_dir)
maf <- read_vcf(
snp_files_list,
genome_build = "hg19",
keep_only_pass = TRUE,
verbose = TRUE
)
data_matrix = sig_tally(maf)$nmf_matrix
fit_legacy <-  sig_fit(
catalogue_matrix = t(data_matrix),
sig_index = "ALL",
sig_db = "legacy",
mode = "SBS",
method = "SA",
return_class = "data.table",
return_error = TRUE
)
setwd(out_dir)
output_fit(fit_legacy, result_dir = "sigflow" , mut_type = "legacy")
fit_sbs <-  sig_fit(
catalogue_matrix = t(data_matrix),
sig_index = "ALL",
sig_db = "SBS",
mode = "SBS",
method = "SA",
return_class = "data.table",
return_error = TRUE
)
output_fit(fit_sbs, result_dir =  "sigflow" , mut_type = "SBS")
# system(paste('docker run -v ', input_vcfs_dir ,  ':/docker_path shixiangwang/sigflow fit -i /docker_path/ -o /docker_path/', out_dir))
}
output_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\PLOS_review_paper\\meta_package_data"
# output_dir = args[1]
# sample_mut_mat = runMuationalPatterns(out_dir = output_dir )
# runSigfit(mut_mat = sample_mut_mat, out_dir = output_dir)
# runDeconstructSigs(out_dir = output_dir)
runSigflow(out_dir = output_dir)
# output_dir = args[1]
# sample_mut_mat = runMuationalPatterns(out_dir = output_dir )
# runSigfit(mut_mat = sample_mut_mat, out_dir = output_dir)
runDeconstructSigs(out_dir = output_dir)
input_vcfs_dir = "C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\kidney_vcf/"
ref_genome = "BSgenome.Hsapiens.UCSC.hg19"
setwd(input_vcfs_dir)
snp_files_list <- dir(input_vcfs_dir, pattern = ".*.vcf")[1:10]
v2_input_matrices_list <-  lapply(snp_files_list, vcf.to.sigs.input )
v2_signatures_list <- lapply(v2_input_matrices_list, whichSignatures,contexts.needed = TRUE,signatures.ref = cosmic_signatures_v2 )
?data
?load
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("VariantAnnotation")
# biocLite("VariantAnnotation")
setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\PLOS_review_paper\\metaSignatures/")
load("data/signatures.exome.cosmic.v3.may2019.rda")
load("data/signatures.cosmic.rda")
load("data/signatures.exome.cosmic.v3.may2019.rda")
# BiocManager::install("VariantAnnotation")
# biocLite("VariantAnnotation")
# setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles\\PLOS_review_paper\\metaSignatures/")
# unzip("deconstructSigs-master.zip")
# install.packages("deconstructSigs-master/", repos = NULL, type="source")
BiocManager::install("deconstructSigs")
