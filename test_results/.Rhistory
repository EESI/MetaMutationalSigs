m <- matrix(3,,3,3,3,nrow = 3, ncol = 1 , byrow = TRUE)
install.packages("igraph")
install.packages("network")
install.packages("sna")
install.packages("visNetwork")
install.packages("threejs")
install.packages("networkD3")
install.packages("ndtv")
plot(x= 1, y = 2 pch =19, cex = 3, col = "red")
#Read the close price for the the S&P 500 Indes for the last month
cols <- c("Date", "Close")
#Create the data set needed to fit a model
spx_history <- data[,cols]
names(spx_history)[names(spx_history) == 'Date'] <- 'ds'
planet_names <- c("Mercury" , "Venus")
planet_distances <- c(57.90, 108.16)
names(planet_names) <- planet_distances
planet_names
names(planet_distances) <- planet_names
planet_names
planet_names <- c("Mercury" , "Venus")
planet_distances <- c(57.90, 108.16)
names(planet_distances) <- planet_names
planet_distances
summary(planet_distances)
mixed_vec <- c(1, 2, "abc")
mixed_vec
mixed_vec <- c(1, 2, 3, 4, 5, 6,7,8,9, "a")
mixed_vec
mixed_vec[1:3]
v <- 2
v
type(v)
class(v)
v <- 2.0
class(v)
v <- 2i
class(v)
v <- 2L
class(v)
data("iris")
iris.Petal
iris
iris["Petal.Length"]
mean(iris["Petal.Length"])
iris["Petal.Length"]
iris["Petal.Length"][:]
iris["Petal.Length"][:]
iris["Petal.Length"][1]
mean(iris["Petal.Length"][1])
iris["Petal.Length"][1]
mean(iris[["Petal.Width"]])
data(mtcars)
mtcars
mtcars
mtcars[rownames(mtcars) == "Mazda", ]
subset(mtcars, rownames(mtcars) %in% "Mazda")
subset(mtcars, rownames(mtcars) %in% "Mazda")
subset(mtcars, "Mazda" %in% rownames(mtcars)  )
subset(mtcars, rownames(mtcars) %in% c("Mazda"))
data(mtcars)
subset(mtcars, rownames(mtcars) %in% c("Mazda"))
mtcars[grep('^M', rownames(mtcars)),]
mtcars[grep('^Mazda', rownames(mtcars)),]
mtcars[grep('^F', rownames(mtcars)),]
data(mtcars)
mtcars
mtcars[grep('^F', rownames(mtcars)),]
mtcars[grep('^[Ff]', rownames(mtcars)),]
c("abc" , "fef")
v <- c(13.5, -20, "orange", FALSE)
class(v)
x <- c(5, -2, 9, 5, 7, -3, 4, 10, 4)
x < 0 <- 0
x < 0 <- 0
x[[<0]] <- 0
x[x<0] <- 0
x
data(mtcars)
mtcars
subset(mtcars, mtcars.cyl ==6)
mtcars[mtcars.cyl ==6]
mtcars[ mtcars[,cyl] ==6]
mtcars.mpg
mtcars[,c("cyl") == 6]
,"gear","carb"
mtcars[,c("cyl","gear","carb")]
mtcars[ mtcars$cyl == 6]
mtcars[ mtcars$cyl == 6,]
mtcars[ mtcars$cyl == 6 && mtcars$hp > 100 ,]
mtcars[ mtcars$cyl == 6 & mtcars$hp > 100 ,]
mtcars[grep('^[Ff]', rownames(mtcars)),"mpg"]
mean( mtcars[grep('^[Ff]', rownames(mtcars)),"mpg"])
help(var)
iris$aboveAveragePetalLength <- iris[ iris$Petal.Length > mean((iris$Petal.Length)) ]
iris$aboveAveragePetalLength <- iris[ iris$Petal.Length > mean(iris$Petal.Length) ]
mean(iris$Petal.Length)
iris$aboveAveragePetalLength <- iris[ iris$Petal.Length > mean(iris$Petal.Length), ]
iris$aboveAveragePetalLength <- ifelse(iris$Petal.Length >   mean(iris$Petal.Length), 1, 0)
iris$aboveAveragePetalLength
a <- "Feb. 15, 2019"
a.asDate()
as.Date(a)
help("as.Date")
as.Date(a, "%m %d, %y")
as.Date(a, "%B. %d, %y")
a <- "Feb. 15, 2019"
a
as.Date(a, "%B. %d, %y")
as.Date(a, "%B %d, %y")
as.Date(a, "%B. %d,%y")
a <- "Feb. 15,2019"
a
as.Date(a, "%B. %d,%y")
as.Date(a, "%B. %d, %Y")
a <- as.Date(a, "%B. %d, %Y")
a
iris[iris$Species == "versicolor"]
iris[iris$Species == "versicolor", ]
iris[iris$Species == "versicolor", "Sepal.Width" ]
mean(iris[iris$Species == "versicolor", "Sepal.Width" ])
mtcars[ mtcars$cyl == 6,]
mtcars[ mtcars$cyl == 6, "wt"]
mean(mtcars[ mtcars$cyl == 6, "wt"])
y <- 4
class(y)
mtcars[mtcars$carb==2, c("mpg", "cyl", "disp", "hp", "wt")]
mtcars[mtcars$carb==2, c(1,2,3,4,6)]
mtcars[mtcars$carb==2, c(1:4,6)]
mtcars[mtcars$carb==2, c(1:4,6)]
mtcars[carb==2, c(1,2,3,4,6)]
subset(mtcars, carb==2, c(1:4,6))
"the fox jumped over the lazy dog!"
s<- "the fox jumped over the lazy dog!"
library(stringr)
str_replace(s, "the" , "")
s
str_replace(s, "the" , "")
trimws(str_replace(s, "the" , "") )
y <- 26
while(y >= 0){
y <- y - 1
}
y
a <- c(1 ,2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)
a
matrix(a, nrow = 3, ncol = 4)
A <- matrix(a, nrow = 3, ncol = 4)
A
dim(a) <- c(3, 4)
a
a <- c(1 ,2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)
a <- c(1 ,2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)
a
sort(a)
dim(a) <- c(3, 4)
a
a <- c(1 ,2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)
sort(a)
dim(a) <- c(3, 4)
a
sort(a)
A <- matrix(a, nrows= 3, ncols = 4)
A
A <- matrix(a, nrow = 3, ncol =  4)
A
A <- matrix(sort(a), nrow = 3, ncol =  4)
A
mean(iris[iris$Species == "setosa",  ])
mean(iris[iris$Species == "setosa ",  ])
mean(iris[iris$Species == "setosa",  ])
iris[iris$Species == "setosa",  ]
length( iris)
dim(iris)
nrow(iris)
unique(iris)
y <- 26
while(y >= 0){
y <- y - 1
break
}
y
x <- c(5, -2, NaN, 5, 7, -3, 4, 10, 4)
ifelse(is.na(x), mean(x, na.rm=TRUE), x)
x <- c(5, -2, NaN, 5, 7, -3, 4, 10, 4)
x
x <- c(5, -2, NA, 5, 7, -3, 4, 10, 4)
x
ifelse(is.na(x), mean(x, na.rm=TRUE), x)
x <- c(5, -2, NA, 5, 7, -3, 4, 10, 4)
x
ifelse(is.na(x), mean(x, na.rm=TRUE), x)
sd(mtcars[ mtcars$cyl == 4, "wt"])
library(GenomicDataCommons)
library(dplyr)
manifest = GenomicDataCommons::files() %>%
GenomicDataCommons::filter(~ cases.project.project_id == "TCGA-LUAD" &
experimental_strategy == "WXS" &
data_format == "BAM") %>%
GenomicDataCommons::manifest()
manifest = manifest %>%
slice(1:10) %>%
select(id, filename)
res = lapply(manifest$id, function(uuid) {
#con = curl::curl(paste0("https://api.gdc.cancer.gov/files/", uuid, "?pretty=true&fields=analysis.metadata.read_groups.target_capture_kit_target_region,analysis.metadata.read_groups.target_capture_kit_name,analysis.metadata.read_groups.target_capture_kit_vendor,analysis.metadata.read_groups.target_capture_kit_catalog_number"))
con = curl::curl(paste0("https://api.gdc.cancer.gov/files/", uuid, "?pretty=true&fields=analysis.metadata.read_groups.target_capture_kit_target_region"))
x = jsonlite::fromJSON(con)
return(x)
})
y = lapply(res, function(x) unique(x$data$analysis$metadata$read_groups))
y = do.call(rbind, y)
manifest = cbind(manifest, y)
print(manifest)
install.packages(GenomicDataCommons)
install.packages("GenomicDataCommons")
#
# somaticInteractions(maf = laml, top = 25, pvalue = c(0.05, 0.1))
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#
# BiocManager::install("BSgenome.Hsapiens.NCBI.GRCh38")
# library('NMF')
#
#
library(deconstructSigs)
library(deconstructSigs)
library(deconstructSigs)
library(dplyr)
library(deconstructSigs)
library(deconstructSigs)
library(sigfit)
data("cosmic_signatures_v2")
data("cosmic_signatures_v3")
load("C:/Users/pande/OneDrive - Drexel University/Documents/Fall-2021/Coop/CGC/SanjeeVCFFiles/rectal_vcf_results_common_removed/maf_tally.RData")
rectal_samples_fit <- fit_signatures(counts = tally_list[["SBS_96"]],signatures = cosmic_signatures_v2,iter = 3000, warmup = 1000,chains = 1, seed = 1756)
rectal_sample_exposures <- retrieve_pars(rectal_samples_fit, "exposures")
rectal_sample_exposures
?plot_reconstruction
retrieve_pars(rectal_samples_fit, "exposures")
retrieve_pars(rectal_samples_fit, "signatures")
retrieve_pars(rectal_samples_fit, "signatures")
retrieve_pars(rectal_samples_fit, "signatures")
exposures
rectal_samples_fit
retrieve_pars(rectal_samples_fit, "exposures")
rectal_samples_fit
install.packages('devtools')
library(devtools)
install.packages(devtools)
setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles/PLOS_review_paper/metaSignatures/test_results")
library(ggplot2)
# library(tidyverse)
library(dplyr)
decon_legacy_df = as_tibble(read.csv("deconstructsigs_results/legacy_sample_errors.csv")) %>%
rename( sample = X,  error = x) %>%
mutate(toolname = "deconstructsigs")
mut_legacy_df = as_tibble(read.csv("mutational_patterns_results/legacy_sample_errors.csv") )%>%
rename( sample = X,  error = x)%>%
mutate(toolname = "mutationalPatterns")
sigfit_legacy_df = as_tibble(read.csv("sigfit_results/sample_errors_legacy.csv"))%>%
rename( sample = X,  error = errors_per_sample)%>%
mutate(toolname = "sigfit")
sigflow_legacy_df = as_tibble(read.csv("sigflow/legacy_fitting_reconstruction_errors.csv"))%>%
mutate(toolname = "sigflow")
final_legacy_df = rbind(rbind(rbind(decon_legacy_df, mut_legacy_df), sigfit_legacy_df), sigflow_legacy_df) %>%
mutate(mode = "Legacy SBS")
decon_sbs_df = as_tibble(read.csv("deconstructsigs_results/sbs_sample_errors.csv")) %>%
rename( sample = X,  error = x) %>%
mutate(toolname = "deconstructsigs")
mut_sbs_df = as_tibble(read.csv("mutational_patterns_results/sample_errors.csv") )%>%
rename( sample = X,  error = x)%>%
mutate(toolname = "mutationalPatterns")
sigfit_sbs_df = as_tibble(read.csv("sigfit_results/sample_errors_sbs.csv"))%>%
rename( sample = X,  error = errors_per_sample_sbs)%>%
mutate(toolname = "sigfit")
sigflow_sbs_df = as_tibble(read.csv("sigflow/SBS_fitting_reconstruction_errors.csv"))%>%
mutate(toolname = "sigflow")
final_sbs_df = rbind(rbind(rbind(decon_sbs_df, mut_sbs_df), sigfit_sbs_df), sigflow_sbs_df) %>%
mutate(mode = "V3 SBS")
decon_dbs_df = as_tibble(read.csv("deconstructsigs_results/dbs_sample_errors.csv")) %>%
rename( sample = X,  error = x) %>%
mutate(toolname = "deconstructsigs")
mut_dbs_df = as_tibble(read.csv("mutational_patterns_results/dbs_sample_errors.csv") )%>%
rename( sample = X,  error = x)%>%
mutate(toolname = "mutationalPatterns")
sigfit_dbs_df = as_tibble(read.csv("sigfit_results/sample_errors_dbs.csv"))%>%
rename( sample = X,  error = errors_per_sample_dbs)%>%
mutate(toolname = "sigfit")
sigflow_dbs_df = as_tibble(read.csv("sigflow/DBS_fitting_reconstruction_errors.csv"))%>%
mutate(toolname = "sigflow")
final_dbs_df = rbind(rbind(rbind(decon_dbs_df, mut_dbs_df), sigfit_dbs_df), sigflow_dbs_df) %>%
mutate(mode = "dbs")
decon_id_df = as_tibble(read.csv("deconstructsigs_results/indel_sample_errors.csv")) %>%
rename( sample = X,  error = x) %>%
mutate(toolname = "deconstructsigs")
mut_id_df = as_tibble(read.csv("mutational_patterns_results/id_sample_errors.csv") )%>%
rename( sample = X,  error = x)%>%
mutate(toolname = "mutationalPatterns")
sigfit_id_df = as_tibble(read.csv("sigfit_results/sample_errors_indel.csv"))%>%
rename( sample = X,  error = errors_per_sample)%>%
mutate(toolname = "sigfit")
sigflow_id_df = as_tibble(read.csv("sigflow/ID_fitting_reconstruction_errors.csv"))%>%
mutate(toolname = "sigflow")
final_id_df = rbind(rbind(rbind(decon_id_df, mut_id_df), sigfit_id_df), sigflow_id_df) %>%
mutate(mode = "ID")
final_df =  rbind(rbind(final_legacy_df, final_sbs_df) , final_id_df)
final_df[nrow(final_df) + 1,] = list(NA, 0, "sigflow", "DBS")
final_df_all_modes =  rbind(rbind(rbind(final_legacy_df, final_sbs_df) , final_id_df), final_dbs_df)
final_df_all_modes =  rbind(rbind(final_legacy_df, final_sbs_df) , final_dbs_df)
setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles/PLOS_review_paper/metaSignatures/paper/")
devtools::install_github("kassambara/ggpubr")
# devtools::install_github("kassambara/ggpubr")
library(ggpubr)
library(ggbeeswarm)
ggboxplot(final_df, x = "toolname",
y = "error",
combine = TRUE,
color = "mode", palette = "jco",
ylab = "error",
add = "jitter",                              # Add jittered points
add.params = list(size = 0.1, jitter = 0.2)  # Point size and the amount of jittering
)
decon_legacy_df = as_tibble(read.csv("deconstructsigs_results/legacy_sample_errors.csv")) %>%
rename( sample = X,  error = x) %>%
mutate(toolname = "deconstructsigs")
mut_legacy_df = as_tibble(read.csv("mutational_patterns_results/legacy_sample_errors.csv") )%>%
rename( sample = X,  error = x)%>%
mutate(toolname = "mutationalPatterns")
sigfit_legacy_df = as_tibble(read.csv("sigfit_results/sample_errors_legacy.csv"))%>%
rename( sample = X,  error = errors_per_sample)%>%
mutate(toolname = "sigfit")
sigflow_legacy_df = as_tibble(read.csv("sigflow/legacy_fitting_reconstruction_errors.csv"))%>%
mutate(toolname = "sigflow")
setwd("C:\\Users\\pande\\OneDrive - Drexel University\\Documents\\Fall-2021\\Coop\\CGC\\SanjeeVCFFiles/PLOS_review_paper/metaSignatures/test_results")
decon_legacy_df = as_tibble(read.csv("deconstructsigs_results/legacy_sample_errors.csv")) %>%
rename( sample = X,  error = x) %>%
mutate(toolname = "deconstructsigs")
mut_legacy_df = as_tibble(read.csv("mutational_patterns_results/legacy_sample_errors.csv") )%>%
rename( sample = X,  error = x)%>%
mutate(toolname = "mutationalPatterns")
sigfit_legacy_df = as_tibble(read.csv("sigfit_results/sample_errors_legacy.csv"))%>%
rename( sample = X,  error = errors_per_sample)%>%
mutate(toolname = "sigfit")
sigflow_legacy_df = as_tibble(read.csv("sigflow/legacy_fitting_reconstruction_errors.csv"))%>%
mutate(toolname = "sigflow")
dplyr::bind_rows(decon_legacy_df, mut_legacy_df, sigfit_legacy_df, sigflow_legacy_df)
final_legacy_df
dplyr::bind_rows(decon_legacy_df, mut_legacy_df, sigfit_legacy_df, sigflow_legacy_df)%>%
mutate(mode = "Legacy SBS")
append(decon_legacy_df, legacy_df_list)
legacy_df_list = c()
append(decon_legacy_df, legacy_df_list)
legacy_df_list = c(decon_legacy_df)
# decon_legacy_df, mut_legacy_df, sigfit_legacy_df, sigflow_legacy_df
dplyr::bind_rows(legacy_df_list)%>%
mutate(mode = "Legacy SBS")
legacy_df_list = c(decon_legacy_df, mut_legacy_df)
# decon_legacy_df, mut_legacy_df, sigfit_legacy_df, sigflow_legacy_df
dplyr::bind_rows(legacy_df_list)%>%
mutate(mode = "Legacy SBS")
dplyr::bind_rows(decon_legacy_df, mut_legacy_df, sigfit_legacy_df, sigflow_legacy_df)%>%
mutate(mode = "Legacy SBS")
final = decon_legacy_df
mutationalPatterns = TRUE
sigflow = TRUE
sigfit = TRUE
deconstructSigs = TRUE
mut_legacy_df = as_tibble(read.csv("mutational_patterns_results/legacy_strict_sample_errors.csv") )%>%
rename( sample = X,  error = x)%>%
mutate(toolname = "mutationalPatterns")
final_legacy_df = mut_legacy_df
sigflow_legacy_df = as_tibble(read.csv("sigflow/legacy_fitting_reconstruction_errors.csv"))%>%
mutate(toolname = "sigflow")
final_legacy_df = rbind(final_legacy_df ,sigflow_legacy_df)
final_legacy_df = final_legacy_df %>%
mutate(mode = "Legacy SBS")
decon_legacy_df = as_tibble(read.csv("deconstructsigs_results/legacy_sample_errors.csv")) %>%
rename( sample = X,  error = x) %>%
mutate(toolname = "deconstructsigs")
final_legacy_df
